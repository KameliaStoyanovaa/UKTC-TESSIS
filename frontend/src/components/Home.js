import React, { useState, useEffect } from "react";

const UpdateStatus = () => {
  const [userId, setUserId] = useState("");
  const [fullName, setFullName] = useState("");
  const [status, setStatus] = useState("");
  const [location, setLocation] = useState(""); // üëà
  const [lastStatus, setLastStatus] = useState("");
  const [message, setMessage] = useState("");

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const token = localStorage.getItem("token");
        const response = await fetch("http://localhost/UKTC-TESSIS/backend/src/routes/user.php", {
          headers: {
            Authorization: `Bearer ${token}`,
            Accept: "application/json",
          },
        });

        const text = await response.text();
        const data = JSON.parse(text);

        if (response.ok && data.user) {
          setUserId(data.user.id);
          setFullName(data.user.full_name);
          setLastStatus(data.user.last_status || "");
        } else {
          setMessage("–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.");
        }
      } catch (error) {
        console.error("–ì—Ä–µ—à–∫–∞:", error);
        setMessage("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.");
      }
    };

    fetchUser();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem("token");

    if (!status) {
      setMessage("–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ —Å—Ç–∞—Ç—É—Å.");
      return;
    }

    if (status === "unenrolled" && location.trim() === "") {
      setMessage("–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –ª–æ–∫–∞—Ü–∏—è –∑–∞ –æ—Ç–ø–∏—Å–≤–∞–Ω–µ.");
      return;
    }

    const payload = {
      userId,
      status,
      ...(status === "unenrolled" && { location }), // –∏–∑–ø—Ä–∞—â–∞–º–µ —Å–∞–º–æ –∞–∫–æ —Ç—Ä—è–±–≤–∞
    };

    const res = await fetch("http://localhost/UKTC-TESSIS/backend/src/routes/auth.php?action=update_status", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(payload),
    });

    const result = await res.json();
    setMessage(result.message);
    if (res.ok) {
      setLastStatus(status);
      setLocation(""); // –Ω—É–ª–∏—Ä–∞–π –ª–æ–∫–∞—Ü–∏—è—Ç–∞
    }
  };

  const canSubmit = () => {
    if (!status) return false;
    if (lastStatus === status) return false;
    if (status === "unenrolled" && location.trim() === "") return false;
    return true;
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded shadow">
      <h2 className="text-2xl font-bold mb-4">–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å</h2>

      <div className="mb-4">
        <label className="block text-gray-700">–ó–¥—Ä–∞–≤–µ–π,</label>
        <input
          type="text"
          value={fullName}
          readOnly
          className="w-full p-2 bg-gray-100 rounded font-semibold"
        />
      </div>

      <div className="mb-4">
        <label className="block text-gray-700">–°—Ç–∞—Ç—É—Å:</label>
        <select
          value={status}
          onChange={(e) => setStatus(e.target.value)}
          className="w-full border p-2 rounded"
        >
          <option value="">-- –∏–∑–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å --</option>
          <option value="enrolled">–ó–∞–ø–∏—Å–∞–Ω</option>
          <option value="unenrolled">–û—Ç–ø–∏—Å–∞–Ω</option>
        </select>
      </div>

      {/* üëá –ø–æ–∫–∞–∑–≤–∞–º–µ –ø–æ–ª–µ –∑–∞ –ª–æ–∫–∞—Ü–∏—è —Å–∞–º–æ –ø—Ä–∏ –æ—Ç–ø–∏—Å–≤–∞–Ω–µ */}
      {status === "unenrolled" && (
        <div className="mb-4">
          <label className="block text-gray-700">–õ–æ–∫–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–ø–∏—Å–≤–∞–Ω–µ:</label>
          <input
            type="text"
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            className="w-full border p-2 rounded"
            placeholder="–ü—Ä–∏–º–µ—Ä: –°–æ—Ñ–∏—è, –í–∞—Ä–Ω–∞ ..."
          />
        </div>
      )}

      <button
        type="submit"
        onClick={handleSubmit}
        disabled={!canSubmit()}
        className={`w-full py-2 px-4 rounded text-white transition ${
          canSubmit() ? "bg-red-600 hover:bg-red-700" : "bg-gray-400 cursor-not-allowed"
        }`}
      >
        –ü–æ—Ç–≤—ä—Ä–¥–∏
      </button>

      {message && <p className="mt-4 text-center text-green-600">{message}</p>}
    </div>
  );
};

export default UpdateStatus;

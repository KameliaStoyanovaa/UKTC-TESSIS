import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";

const AdminHome = () => {
  const [user, setUser] = useState(null);
  const [enrolledList, setEnrolledList] = useState([]);
  const [unenrolledList, setUnenrolledList] = useState([]);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) return navigate("/login");

    const fetchAdminData = async () => {
      try {
        // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        const userRes = await fetch("http://localhost/UKTC-TESSIS/backend/src/routes/user.php", {
          headers: {
            Authorization: `Bearer ${token}`,
            Accept: "application/json",
          },
        });

        const userText = await userRes.text();
        const userData = JSON.parse(userText);

        if (!userData.user || userData.user.role !== "admin") {
          return navigate("/");
        }

        setUser(userData.user);

        // üì¶ –í–∑–µ–º–∞–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞
        const statusRes = await fetch(
            "http://localhost/UKTC-TESSIS/backend/src/routes/auth.php?action=get_week_records",
            {
              headers: {
                Authorization: `Bearer ${token}`,
                Accept: "application/json",
              },
            }
        );

        const raw = await statusRes.text();
        console.log("üì¶ –°—É—Ä–æ–≤ –æ—Ç–≥–æ–≤–æ—Ä:", raw);

        let records = [];

        try {
          if (raw.trim().startsWith("{") || raw.trim().startsWith("[")) {
            records = JSON.parse(raw);
          } else {
            console.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –Ω–µ –µ JSON:", raw);
          }
        } catch (err) {
          console.error("‚ùå JSON parse error:", err);
        }


        const enrolled = records.filter((r) => r.status === "enrolled");
        const unenrolled = records.filter((r) => r.status === "unenrolled");

        setEnrolledList(enrolled);
        setUnenrolledList(unenrolled);
      } catch (err) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∞–¥–º–∏–Ω –¥–∞–Ω–Ω–∏:", err);
        navigate("/login");
      } finally {
        setLoading(false);
      }
    };

    fetchAdminData();
  }, [navigate]);

  if (loading) return <p className="text-center mt-10 text-lg">–ó–∞—Ä–µ–∂–¥–∞–Ω–µ...</p>;

  return (
      <div className="max-w-6xl mx-auto p-6">
        <h1 className="text-3xl font-bold text-center mb-10">–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª</h1>

        {/* –ó–∞–ø–∏—Å–∞–Ω–∏ */}
        <section className="mb-10">
          <h2 className="text-xl font-semibold text-green-700 mb-4">üìó –ó–∞–ø–∏—Å–∞–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∏</h2>
          <StatusTable data={enrolledList} />
        </section>

        {/* –û—Ç–ø–∏—Å–∞–Ω–∏ */}
        <section>
          <h2 className="text-xl font-semibold text-red-700 mb-4">üìï –û—Ç–ø–∏—Å–∞–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∏</h2>
          <StatusTable data={unenrolledList} />
        </section>
      </div>
  );
};

const StatusTable = ({ data }) => {
  if (!data.length) {
    return <p className="italic text-gray-500 text-sm">–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –∑–∞–ø–∏—Å–∏.</p>;
  }

  return (
      <div className="overflow-x-auto border rounded shadow">
        <table className="min-w-full table-auto text-sm">
          <thead className="bg-gray-100">
          <tr>
            <th className="text-left p-3">#</th>
            <th className="text-left p-3">–ò–º–µ</th>
            <th className="text-left p-3">–ò–º–µ–π–ª</th>
            <th className="text-left p-3">–î–∞—Ç–∞</th>
            <th className="text-left p-3">–õ–æ–∫–∞—Ü–∏—è</th>
          </tr>
          </thead>
          <tbody>
          {data.map((entry, idx) => (
              <tr key={entry.id + "_" + idx} className="border-t hover:bg-gray-50">
                <td className="p-3">{idx + 1}</td>
                <td className="p-3">{entry.full_name}</td>
                <td className="p-3">{entry.email}</td>
                <td className="p-3">{new Date(entry.timestamp).toLocaleString()}</td>
                <td className="p-3">{entry.location || "-"}</td>
              </tr>
          ))}
          </tbody>
        </table>
      </div>
  );
};

export default AdminHome;
